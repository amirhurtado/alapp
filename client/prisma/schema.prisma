generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}



model Messages {
  id Int @id @default(autoincrement())


  type String @default("text")

  senderId  String
  sender    User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   User   @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  link      String
  message   String
  type      String
  senderId  String
  sender    User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   User   @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model EventUserConfirm {
  id Int @id @default(autoincrement())

  eventId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  title       String
  description String

  date DateTime

  latitude  Float
  longitude Float

  usersConfirm EventUserConfirm[]
}

model MemberGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Group {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  description String
  imageUrl    String

  adminId String
  admin   User   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  members MemberGroup[]
  event   Event[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model LikeComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String @db.VarChar(255)

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  likesComment LikeComment[]

  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  comments Comment[] @relation("CommentReplies")
}

model LikePost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Repost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?  @db.VarChar(255)
  mediaUrl    String?
  mediaType   String?

  groupId Int?

  likesPost LikePost[]
  favorites Favorite[]
  comments  Comment[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  reposts Repost[]
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followerId String
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Profile {
  id       Int     @id @default(autoincrement())
  bio      String?
  location String?
  website  String?
  bg       String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String   @unique
  displayName String
  imageUrl    String   @default("/user-default.jpg")
  createdAt   DateTime @default(now())

  profile Profile?

  reposts      Repost[]
  posts        Post[]
  likesPost    LikePost[]
  likesComment LikeComment[]
  favorites    Favorite[]
  comments     Comment[]

  memberOfGroups MemberGroup[]
  adminOfGroups  Group[]

  followers Follow[] @relation("Follower")
  following Follow[] @relation("Following")

  eventsConfirm EventUserConfirm[]

  receivedNotifications Notification[] @relation("Receiver")
  sentNotifications     Notification[] @relation("Sender")


  receivedMessages Messages[] @relation("Receiver")
  sentMessages     Messages[] @relation("Sender")
}
